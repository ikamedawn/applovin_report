{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#applovin-report","title":"applovin-report","text":"<p>Applovin Report APIs wrapper</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Revenue Reporting API</li> <li>More APIs are coming soon</li> </ul>"},{"location":"api/","title":"Modules","text":""},{"location":"api/#applovin_report.revenue_reporting_api.RevenueReport","title":"<code>RevenueReport</code>","text":"<p>Detailed documentation for this API can be found at: Revenue Report API</p> Source code in <code>applovin_report/revenue_reporting_api.py</code> <pre><code>class RevenueReport:\n\"\"\"\n    Detailed documentation for this API can be found at: [Revenue Report API](https://dash.applovin.com/documentation/mediation/reporting-api/max-ad-revenue)\n    \"\"\"\n\n    ENDPOINT = \"https://r.applovin.com/maxReport\"\n\n    def __init__(self, api_key: str | list[str]):\n\"\"\"\n        Args:\n            api_key: API key(s) to use for the report\n\n        Returns:\n            None\n\n        Doc Author:\n            minhpc@ikameglobal.com\n        \"\"\"\n        self.api_key = api_key\n\n    def get_report(\n        self,\n        start_date: str = None,\n        end_date: str = None,\n        columns: list[str] = None,\n        limit: int = 100000,\n        max_retries: int = 3,\n        retry_interval: int = 30,\n        **kwargs,\n    ) -&gt; DataFrame:\n\"\"\"\n        Retrieve a report from the MAX Revenue Report API.\n\n\n        Args:\n            start_date: YYYY-MM-DD, within the last 45 days\n            end_date: YYYY-MM-DD, within the last 45 days\n            columns: List of columns to include in the report\n            limit: Set the number of rows to return\n            max_retries: Set the number of retries\n            retry_interval: Set the number of seconds to wait between retries\n            **kwargs: Additional parameters to pass to the API\n\n        Returns:\n            A pandas DataFrame containing the report data\n\n        Doc Author:\n            minhpc@ikameglobal.com\n        \"\"\"\n        if not start_date or not end_date:\n            start_date = (datetime.now() - timedelta(days=2)).strftime(\"%Y-%m-%d\")\n            end_date = (datetime.now() - timedelta(days=1)).strftime(\"%Y-%m-%d\")\n\n        params = {\n            \"api_key\": self.api_key,\n            \"start\": start_date,\n            \"end\": end_date,\n            \"columns\": \",\".join(columns),\n            \"format\": \"json\",\n            \"limit\": limit,\n            **kwargs,\n        }\n\n        for i in range(max_retries + 1):\n            response = requests.get(url=RevenueReport.ENDPOINT, params=params)\n\n            if response.status_code == 200:\n                return DataFrame(response.json()[\"results\"])\n            else:\n                print(f\"Retrying... ({i + 1}/{max_retries})\")\n                time.sleep(retry_interval)\n\n        print(traceback.format_exc())\n        raise Exception(f\"Error: {response.status_code}\")\n\n    def get_report_batch(\n        self,\n        start_date: str = None,\n        end_date: str = None,\n        columns: list[str] = None,\n        batch_size: int = 100000,\n        max_retries: int = 3,\n        retry_interval: int = 30,\n        **kwargs,\n    ) -&gt; Iterator[DataFrame]:\n\"\"\"\n        Retrieve a report from the MAX Revenue Report API in batches.\n\n        Args:\n            start_date: YYYY-MM-DD, within the last 45 days\n            end_date: YYYY-MM-DD, within the last 45 days\n            columns: List of columns to include in the report\n            batch_size: Number of rows to return per batch\n            max_retries: Number of retries\n            retry_interval: Number of seconds to wait between retries\n            **kwargs: Additional parameters to pass to the API\n\n        Returns:\n            A generator that yields a pandas DataFrame containing the report data\n\n        Doc Author:\n            minhpc@ikameglobal.com\n        \"\"\"\n        if not start_date or not end_date:\n            start_date = (datetime.now() - timedelta(days=2)).strftime(\"%Y-%m-%d\")\n            end_date = (datetime.now() - timedelta(days=1)).strftime(\"%Y-%m-%d\")\n\n        offset = 0\n        has_next_batch = True\n        while has_next_batch:\n            params = {\n                \"api_key\": self.api_key,\n                \"start\": start_date,\n                \"end\": end_date,\n                \"columns\": \",\".join(columns),\n                \"format\": \"json\",\n                \"offset\": offset,\n                \"limit\": batch_size,\n                **kwargs,\n            }\n\n            response = None\n            for i in range(max_retries + 1):\n                response = requests.get(url=RevenueReport.ENDPOINT, params=params)\n                if response.status_code == 200:\n                    break\n                print(f\"Retrying... ({i + 1}/{max_retries})\")\n                time.sleep(retry_interval)\n            if response.status_code != 200:\n                print(traceback.format_exc())\n                raise Exception(f\"Error: {response.status_code}\\nLast offset: {offset}\\nBatch size: {batch_size}\")\n\n            results = response.json()[\"results\"]\n            has_next_batch = len(results) == batch_size\n            offset += batch_size\n            yield DataFrame(results)\n</code></pre>"},{"location":"api/#applovin_report.revenue_reporting_api.RevenueReport.__init__","title":"<code>__init__(api_key)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str | list[str]</code> <p>API key(s) to use for the report</p> required <p>Returns:</p> Type Description <p>None</p> Doc Author <p>minhpc@ikameglobal.com</p> Source code in <code>applovin_report/revenue_reporting_api.py</code> <pre><code>def __init__(self, api_key: str | list[str]):\n\"\"\"\n    Args:\n        api_key: API key(s) to use for the report\n\n    Returns:\n        None\n\n    Doc Author:\n        minhpc@ikameglobal.com\n    \"\"\"\n    self.api_key = api_key\n</code></pre>"},{"location":"api/#applovin_report.revenue_reporting_api.RevenueReport.get_report","title":"<code>get_report(start_date=None, end_date=None, columns=None, limit=100000, max_retries=3, retry_interval=30, **kwargs)</code>","text":"<p>Retrieve a report from the MAX Revenue Report API.</p> <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>str</code> <p>YYYY-MM-DD, within the last 45 days</p> <code>None</code> <code>end_date</code> <code>str</code> <p>YYYY-MM-DD, within the last 45 days</p> <code>None</code> <code>columns</code> <code>list[str]</code> <p>List of columns to include in the report</p> <code>None</code> <code>limit</code> <code>int</code> <p>Set the number of rows to return</p> <code>100000</code> <code>max_retries</code> <code>int</code> <p>Set the number of retries</p> <code>3</code> <code>retry_interval</code> <code>int</code> <p>Set the number of seconds to wait between retries</p> <code>30</code> <code>**kwargs</code> <p>Additional parameters to pass to the API</p> <code>{}</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas DataFrame containing the report data</p> Doc Author <p>minhpc@ikameglobal.com</p> Source code in <code>applovin_report/revenue_reporting_api.py</code> <pre><code>def get_report(\n    self,\n    start_date: str = None,\n    end_date: str = None,\n    columns: list[str] = None,\n    limit: int = 100000,\n    max_retries: int = 3,\n    retry_interval: int = 30,\n    **kwargs,\n) -&gt; DataFrame:\n\"\"\"\n    Retrieve a report from the MAX Revenue Report API.\n\n\n    Args:\n        start_date: YYYY-MM-DD, within the last 45 days\n        end_date: YYYY-MM-DD, within the last 45 days\n        columns: List of columns to include in the report\n        limit: Set the number of rows to return\n        max_retries: Set the number of retries\n        retry_interval: Set the number of seconds to wait between retries\n        **kwargs: Additional parameters to pass to the API\n\n    Returns:\n        A pandas DataFrame containing the report data\n\n    Doc Author:\n        minhpc@ikameglobal.com\n    \"\"\"\n    if not start_date or not end_date:\n        start_date = (datetime.now() - timedelta(days=2)).strftime(\"%Y-%m-%d\")\n        end_date = (datetime.now() - timedelta(days=1)).strftime(\"%Y-%m-%d\")\n\n    params = {\n        \"api_key\": self.api_key,\n        \"start\": start_date,\n        \"end\": end_date,\n        \"columns\": \",\".join(columns),\n        \"format\": \"json\",\n        \"limit\": limit,\n        **kwargs,\n    }\n\n    for i in range(max_retries + 1):\n        response = requests.get(url=RevenueReport.ENDPOINT, params=params)\n\n        if response.status_code == 200:\n            return DataFrame(response.json()[\"results\"])\n        else:\n            print(f\"Retrying... ({i + 1}/{max_retries})\")\n            time.sleep(retry_interval)\n\n    print(traceback.format_exc())\n    raise Exception(f\"Error: {response.status_code}\")\n</code></pre>"},{"location":"api/#applovin_report.revenue_reporting_api.RevenueReport.get_report_batch","title":"<code>get_report_batch(start_date=None, end_date=None, columns=None, batch_size=100000, max_retries=3, retry_interval=30, **kwargs)</code>","text":"<p>Retrieve a report from the MAX Revenue Report API in batches.</p> <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>str</code> <p>YYYY-MM-DD, within the last 45 days</p> <code>None</code> <code>end_date</code> <code>str</code> <p>YYYY-MM-DD, within the last 45 days</p> <code>None</code> <code>columns</code> <code>list[str]</code> <p>List of columns to include in the report</p> <code>None</code> <code>batch_size</code> <code>int</code> <p>Number of rows to return per batch</p> <code>100000</code> <code>max_retries</code> <code>int</code> <p>Number of retries</p> <code>3</code> <code>retry_interval</code> <code>int</code> <p>Number of seconds to wait between retries</p> <code>30</code> <code>**kwargs</code> <p>Additional parameters to pass to the API</p> <code>{}</code> <p>Returns:</p> Type Description <code>Iterator[DataFrame]</code> <p>A generator that yields a pandas DataFrame containing the report data</p> Doc Author <p>minhpc@ikameglobal.com</p> Source code in <code>applovin_report/revenue_reporting_api.py</code> <pre><code>def get_report_batch(\n    self,\n    start_date: str = None,\n    end_date: str = None,\n    columns: list[str] = None,\n    batch_size: int = 100000,\n    max_retries: int = 3,\n    retry_interval: int = 30,\n    **kwargs,\n) -&gt; Iterator[DataFrame]:\n\"\"\"\n    Retrieve a report from the MAX Revenue Report API in batches.\n\n    Args:\n        start_date: YYYY-MM-DD, within the last 45 days\n        end_date: YYYY-MM-DD, within the last 45 days\n        columns: List of columns to include in the report\n        batch_size: Number of rows to return per batch\n        max_retries: Number of retries\n        retry_interval: Number of seconds to wait between retries\n        **kwargs: Additional parameters to pass to the API\n\n    Returns:\n        A generator that yields a pandas DataFrame containing the report data\n\n    Doc Author:\n        minhpc@ikameglobal.com\n    \"\"\"\n    if not start_date or not end_date:\n        start_date = (datetime.now() - timedelta(days=2)).strftime(\"%Y-%m-%d\")\n        end_date = (datetime.now() - timedelta(days=1)).strftime(\"%Y-%m-%d\")\n\n    offset = 0\n    has_next_batch = True\n    while has_next_batch:\n        params = {\n            \"api_key\": self.api_key,\n            \"start\": start_date,\n            \"end\": end_date,\n            \"columns\": \",\".join(columns),\n            \"format\": \"json\",\n            \"offset\": offset,\n            \"limit\": batch_size,\n            **kwargs,\n        }\n\n        response = None\n        for i in range(max_retries + 1):\n            response = requests.get(url=RevenueReport.ENDPOINT, params=params)\n            if response.status_code == 200:\n                break\n            print(f\"Retrying... ({i + 1}/{max_retries})\")\n            time.sleep(retry_interval)\n        if response.status_code != 200:\n            print(traceback.format_exc())\n            raise Exception(f\"Error: {response.status_code}\\nLast offset: {offset}\\nBatch size: {batch_size}\")\n\n        results = response.json()[\"results\"]\n        has_next_batch = len(results) == batch_size\n        offset += batch_size\n        yield DataFrame(results)\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install applovin-report, run this command in your terminal:</p> <pre><code>pip install applovin_report\n</code></pre> <p>This is the preferred method to install applovin-report, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-source","title":"From source","text":"<p>The source for applovin-report can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>git clone git://github.com/ikamedawn/applovin_report\n</code></pre> <p>Or download the tarball:</p> <pre><code>curl -OJL https://github.com/ikamedawn/applovin_report/tarball/main\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>pip install .\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>For more information about the API (params, columns), see the Revenue Reporting API.</p>"},{"location":"usage/#revenue-reporting-api","title":"Revenue Reporting API","text":""},{"location":"usage/#get-report","title":"Get report","text":"<pre><code>from applovin_report import RevenueReport\n\nreport = RevenueReport(api_key=\"your_api_key\")\n\n_columns = [\n    \"day\",\n    \"package_name\",\n    \"platform\",\n    \"country\",\n    \"application\",\n    \"max_ad_unit_test\",\n    \"max_ad_unit_id\",\n    \"network\",\n    \"network_placement\",\n    'ad_format',\n    \"attempts\",\n    \"responses\",\n    \"fill_rate\",\n    \"impressions\",\n    \"estimated_revenue\",\n    \"ecpm\",\n]\n\nresult = report.get_report(\n    start_date=\"2023-05-23\",\n    end_date=\"2023-05-23\",\n    columns=_columns,\n    filter_package_name=\"com.jura.car.crashes.simulator\", )\n\nprint(result)\n</code></pre>"},{"location":"usage/#get-report-in-batch","title":"Get report in batch","text":"<pre><code>from applovin_report import RevenueReport\nimport pandas as pd\n\nreport = RevenueReport(api_key=\"your_api_key\")\n\n_columns = [\n    \"day\",\n    \"package_name\",\n    \"platform\",\n    \"country\",\n    \"application\",\n    \"max_ad_unit_test\",\n    \"max_ad_unit_id\",\n    \"network\",  # bigquery\n    \"network_placement\",\n    'ad_format',  # big_query\n    \"attempts\",\n    \"responses\",\n    \"fill_rate\",\n    \"impressions\",\n    \"estimated_revenue\",\n    \"ecpm\",\n]\n\ndf = pd.DataFrame(columns=_columns)\nfor df_result in report.get_report_batch(\n    start_date=\"2023-05-23\",\n    end_date=\"2023-05-25\",\n    columns=_columns,\n    batch_size=10000,\n    filter_package_name=\"com.cooking.games.fever.food.city.craze.dream\",\n):\n    # Concat for full data  or process every batch\n    df = pd.concat([df, df_result], ignore_index=True)\nprint(df)\n</code></pre>"}]}